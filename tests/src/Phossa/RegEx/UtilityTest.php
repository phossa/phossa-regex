<?php
namespace Phossa\RegEx;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-25 at 02:11:37.
 */
class UtilityTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Phossa\RegEx\Utility::toPattern
     */
    public function testToPattern()
    {
        // test 1
        $regex1 = '^.+$';
        $pattern1 = Utility::toPattern($regex1, 'm');
        $this->assertEquals('/^.+$/m', $pattern1);

        // test 2
        $regex2 = '^#.*/$';
        $pattern2 = Utility::toPattern($regex2);
        $this->assertEquals('@^#.*/$@', $pattern2);

        // test 3
        $regex3 = '/#@%~&!';
        $pattern3 = Utility::toPattern($regex3);
        $this->assertEquals('/\/#@%~&!/', $pattern3);

        // escaped those unescaped '/' in regex
        $regex4 = 'bingo/#@%~\\\/&\/!';
        $pattern4 = Utility::toPattern($regex4, 'm');
        $this->assertEquals('/bingo\/#@%~\\\\\/&\/!/m', $pattern4);
    }

    /**
     * @covers Phossa\RegEx\Utility::validateRegEx
     */
    public function testValidateRegEx()
    {
        // good regex
        $regex = "[a-z].+";
        $res = Utility::validateRegEx($regex);
        $this->assertEquals('', $res);

        // bad regex
        $regex2 = "[a-z].(";
        $res2 = Utility::validateRegEx($regex2);
        $this->assertContains('failed', $res2);
    }

    /**
     * @covers Phossa\RegEx\Utility::modifyRegEx
     */
    public function testModifyRegEx()
    {
        $regex = "[a-z]+";

        // convert to pattern
        $res1 = Utility::modifyRegEx($regex, true);
        $this->assertEquals('/[a-z]+/', $res1);

        // add modifier
        $res2 = Utility::modifyRegEx($regex, 'iu');
        $this->assertEquals('/[a-z]+/iu', $res2);

        // add group name
        $res3 = Utility::modifyRegEx($regex, false, 'name');
        $this->assertEquals('(?<name>[a-z]+)', $res3);

        // add boundary
        $res4 = Utility::modifyRegEx($regex, false, false, true);
        $this->assertEquals('(?<=\b|[^\d])[a-z]+(?=\b|[^\d])', $res4);

        // add anchor
        $res5 = Utility::modifyRegEx($regex, false, false, false, true);
        $this->assertEquals('^[a-z]+$', $res5);

        // full test
        $res6 = Utility::modifyRegEx($regex, 'm', 'name', true, true);
        $this->assertEquals(
            '/^(?<=\b|[^\d])(?<name>[a-z]+)(?=\b|[^\d])$/m',
            $res6
        );
    }

    /**
     * @covers Phossa\RegEx\Utility::escapeUnEscaped
     */
    public function testEscapeUnEscaped()
    {
        // test 1
        $str1 = "test's";
        $res1 = Utility::escapeUnEscaped($str1, "'");
        $this->assertEquals("test\'s", $res1);

        // test 2
        $str2 = "test's bingo\' w\\\'s";
        $res2 = Utility::escapeUnEscaped($str2, "'");
        $this->assertEquals("test\'s bingo\' w\\\\\'s", $res2);

        // another escape char "
        $str3 = "test's bingo\"'x w\"\"'s";
        $res3 = Utility::escapeUnEscaped($str3, "'", '"');
        $this->assertEquals("test\"'s bingo\"'x w\"\"\"'s", $res3);

        // same escape char as char
        $str4 = "test's bingo''x w'''s";
        $res4 = Utility::escapeUnEscaped($str4, "'", "'");
        $this->assertEquals("test''s bingo''x w''''s", $res4);
    }

    /**
     * @covers Phossa\RegEx\Utility::unEscapeEscaped
     */
    public function testUnEscapeEscaped()
    {
        // test 1
        $str1 = "test\'s";
        $res1 = Utility::unEscapeEscaped($str1, "'");
        $this->assertEquals("test's", $res1);

        // test 2
        $str2 = "test's bingo\' w\\\\\'s";
        $res2 = Utility::unEscapeEscaped($str2, "'");
        $this->assertEquals("test's bingo' w\\\'s", $res2);

        // another escape char "
        $str3 = "test's bingo\"'x w\"\"\"'s";
        $res3 = Utility::unEscapeEscaped($str3, "'", '"');
        $this->assertEquals("test's bingo'x w\"\"'s", $res3);

        // same escape char as char
        $str4 = "test's bingo''x w''''s";
        $res4 = Utility::unEscapeEscaped($str4, "'", "'");
        $this->assertEquals("test's bingo'x w'''s", $res4);
    }

    /**
     * @covers Phossa\RegEx\Utility::isWrappedWithChar
     */
    public function testIsWrappedWithChar()
    {
        // test 1
        $str1 = "test's";
        $this->assertFalse(Utility::isWrappedWithChar($str1, "'"));

        // test 2
        $str2 = "'test'";
        $this->assertTrue(Utility::isWrappedWithChar($str2, "'"));

        // test 3
        $str3 = "'te'st'";
        $this->assertFalse(Utility::isWrappedWithChar($str3, "'"));

        // test 4
        $str4 = "'te\'st'";
        $this->assertTrue(Utility::isWrappedWithChar($str4, "'"));
    }

    /**
     * @covers Phossa\RegEx\Utility::wrapWithChar
     */
    public function testWrapWithChar()
    {
        // test 1
        $str1 = "test's";
        $res1 = Utility::wrapWithChar($str1, "'");
        $this->assertEquals("'test\'s'", $res1);

        // test 2
        $str2 = "test's bin\\\'go \\\\\'wow";
        $res2 = Utility::wrapWithChar($str2, "'");
        $this->assertEquals("'test\'s bin\\\\\'go \\\\\'wow'", $res2);

        // same wrap & escape
        $str3 = 'wow"bingo';
        $res3 = Utility::wrapWithChar($str3, '"', '"');
        $this->assertEquals('"wow""bingo"', $res3);
    }

    /**
     * @covers Phossa\RegEx\Utility::unwrapWithChar
     */
    public function testUnwrapWithChar()
    {
        // test 1
        $str1 = "'tests'";
        $res1 = Utility::unWrapWithChar($str1, "'");
        $this->assertEquals("tests", $res1);

        // test 2
        $str2 = "'test\'s bin\\\'go \\\\\'wow'";
        $res2 = Utility::unWrapWithChar($str2, "'");
        $this->assertEquals("test's bin\\\'go \\\'wow", $res2);

        // same wrap & escape
        $str3 = '"wow""bingo"';
        $res3 = Utility::unWrapWithChar($str3, '"', '"');
        $this->assertEquals('wow"bingo', $res3);
    }

    /**
     * @covers Phossa\RegEx\Utility::groupRegEx
     */
    public function testGroupRegEx()
    {
        $regex = "[a-z]+";

        // test 1
        $res1 = Utility::groupRegEx($regex, 'name');
        $this->assertEquals('(?<name>[a-z]+)', $res1);

        // test 2
        $res2 = Utility::groupRegEx($regex);
        $this->assertEquals('([a-z]+)', $res2);
    }

    /**
     * @covers Phossa\RegEx\Utility::addBoundary
     */
    public function testAddBoundary()
    {
        $regex = "[a-z]+";
        $res = Utility::addBoundary($regex);
        $this->assertEquals('(?<=\b|[^\d])[a-z]+(?=\b|[^\d])', $res);
    }

    /**
     * @covers Phossa\RegEx\Utility::getLineColumn
     */
    public function testGetLineColumn()
    {
        // string
        $str = <<<EOF
test
bingo
    what
EOF;
        // start from 1
        $res1 = Utility::getLineColumn($str, 8);
        $this->assertEquals([2,4], $res1);

        // start from 0
        $res2 = Utility::getLineColumn($str, 8, false);
        $this->assertEquals([1,3], $res2);
    }
}
